// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //プライマリキー、cuid()によるユニークID
  id         String   @id @default(cuid())
  //メールアドレス
  email      String   @unique
  //ユーザーの苗字
  lastName   String
  //ユーザーの名前
  firstName  String
  //ハッシュ化されたパスワード
  password   String
  //ロール(デフォルト：member)                   
  role       String   @default("member")
  //作成日時
  created_at DateTime @default(now())
  //更新日時 
  updated_at DateTime @updatedAt

  stacks      Stack[]
  userClasses UserClasses[]
}

model Organization {
  //自動インクリメントのプライマリキー
  id                  Int       @id @default(autoincrement())
  //組織名
  name                String
  //住所
  address             String
  //登録番号
  registration_number String    @unique
  //作成日時
  created_at          DateTime  @default(now())
  //更新日時
  updated_at          DateTime  @updatedAt
  //複数のSchoolとリレーション
  schools             School[]
  payments            Payment[]
}

model School {
  //自動インクリメントのプライマリキー
  id                         Int      @id @default(autoincrement())
  //学校名
  name                       String
  //Organizationとの関連ID
  organization_id            Int
  //学校登録番号
  school_registration_number String   @unique
  //学校住所
  address                    String
  //作成日時
  created_at                 DateTime @default(now())
  //更新日時
  updated_at                 DateTime @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id])
  //複数のClassとリレーション
  classes      Class[]
}

model Class {
  //自動インクリメントのプライマリキー
  id         Int      @id @default(autoincrement())
  //クラス名
  name       String
  //schoolとの関連ID
  school_id  Int
  //作成日時
  created_at DateTime @default(now())
  //更新日時
  updated_at DateTime @updatedAt

  school      School        @relation(fields: [school_id], references: [id])
  //複数のCapsuleとリレーション
  capsules    Capsule[]
  //複数のUserClassesとリレーション
  userClasses UserClasses[]
}

model Capsule {
  //自動インクリメントのプライマリキー
  id              Int      @id @default(autoincrement())
  //Classとの関連ID
  class_id        Int
  //カプセルのサイズ
  size            String
  //カプセルを作成した日
  release_date    DateTime
  //アップロード期限
  upload_deadline DateTime
  //作成日時
  created_at      DateTime @default(now())
  //更新日時
  updated_at      DateTime @updatedAt

  class     Class     @relation(fields: [class_id], references: [id])
  // Capsuleが複数のStackを持つリレーション
  stacks    Stack[]
  // Capsuleが複数のHistoryを持つリレーション
  histories History[]
}

model Media {
  //自動インクリメントのプライマリキー
  id         Int    @id @default(autoincrement())
  // Capsuleとの関連ID
  capsule_id Int
  //ファイルパス(例: "s3://bucket/media/file.mp4")
  file_path  String
  //ファイルタイプ(例: "video")
  file_type  String
}

model Stack {
  //自動インクリメントのプライマリキー
  id          Int      @id @default(autoincrement())
  // Capsuleとの関連ID
  capsule_id  Int
  //ファイルパス
  file_path   String
  // アップロードユーザーID
  uploaded_by String
  //作成日時
  created_at  DateTime @default(now())
  //更新日時
  updated_at  DateTime @updatedAt

  //リレーションの設定
  //Capsuleとのリレーション
  capsule Capsule @relation(fields: [capsule_id], references: [id])
  //Userとのリレーション
  user    User    @relation(fields: [uploaded_by], references: [id])
}

model Payment {
  //自動インクリメントのプライマリキー
  id              Int      @id @default(autoincrement())
  // Organizationモデルのidを参照する外部キー
  organization_id Int
  //支払額を表すフィールド
  amount          Float
  //支払が行われた日付
  payment_date    String
  //支払の有効期限
  duration        String
  //作成日時
  created_at      DateTime @default(now())
  //更新日時
  updated_at      DateTime @updatedAt

  //リレーション設定
  organization Organization @relation(fields: [organization_id], references: [id])
}

model History {
  //自動インクリメントのプライマリキー
  id         Int      @id @default(autoincrement())
  //Capsuleモデルのidの参照キー
  capsule_id Int
  //イベントの内容を記録するフィールド（例: "Media added"）
  event      String
  //作成日時
  created_at DateTime @default(now())
  //更新日時
  updated_at DateTime @updatedAt

  //リレーション設定
  capsule Capsule @relation(fields: [capsule_id], references: [id])
}

model UserClasses {
  //自動インクリメントのプライマリキー
  id         Int      @id @default(autoincrement())
  // Userモデルのidを参照する外部キー
  user_id    String
  // Classモデルのidを参照する外部キー
  class_id   Int
  //作成日時
  created_at DateTime @default(now())
  //更新日時
  updated_at DateTime @updatedAt

  //リレーションの設定
  // Userとのリレーション設定
  user  User  @relation(fields: [user_id], references: [id])
  //Classとのリレーション
  class Class @relation(fields: [class_id], references: [id])
}
