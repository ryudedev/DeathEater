generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  // 学校管理者
  ROOT
  // クラスの管理者
  ADMIN
  // クラス代表者
  LEADER
  // 一般ユーザー
  MEMBER
}

model User {
  // プライマリキー、cuid()によるユニークID
  id         String   @id @default(cuid())
  // メールアドレス
  email      String   @unique
  // ユーザーの苗字
  lastName   String
  // ユーザーの名前
  firstName  String
  // ロール(デフォルト：member)
  role       Role   @default(MEMBER)
  // 作成日時
  created_at DateTime @default(now())
  // 更新日時
  updated_at DateTime @updatedAt

  stacks      Stack[]
  userClasses UserClasses[]
}

model Organization {
  // 自動インクリメントのプライマリキー
  id                  String    @id @default(cuid())
  // 組織名
  name                String
  // 住所
  address             String
  // 登録番号
  registration_number String    @unique
  // 作成日時
  created_at          DateTime  @default(now())
  // 更新日時
  updated_at          DateTime  @updatedAt
  // 複数のSchoolとリレーション
  schools             School[]
  payments            Payment[]
}

model School {
  // 自動インクリメントのプライマリキー
  id                         String   @id @default(cuid())
  // 学校名
  name                       String
  // Organizationとの関連ID
  organization_id            String
  // 学校登録番号
  school_registration_number String   @unique
  // 学校住所
  address                    String
  // 作成日時
  created_at                 DateTime @default(now())
  // 更新日時
  updated_at                 DateTime @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id])
  // 複数のClassとリレーション
  classes      Class[]
}

model Class {
  // 自動インクリメントのプライマリキー
  id         String   @id @default(cuid())
  // クラス名
  name       String
  // schoolとの関連ID
  school_id  String
  // 作成日時
  created_at DateTime @default(now())
  // 更新日時
  updated_at DateTime @updatedAt

  school      School        @relation(fields: [school_id], references: [id])
  // 複数のCapsuleとリレーション
  capsules    Capsule[]
  // 複数のUserClassesとリレーション
  userClasses UserClasses[]
}

model Capsule {
  // 自動インクリメントのプライマリキー
  id              String   @id @default(cuid())
  // Classとの関連ID
  class_id        String
  // カプセルのサイズ
  size            String
  // カプセルを作成した日
  release_date    DateTime
  // アップロード期限
  upload_deadline DateTime
  // 作成日時
  created_at      DateTime @default(now())
  // 更新日時
  updated_at      DateTime @updatedAt

  class     Class     @relation(fields: [class_id], references: [id])
  // Capsuleが複数のStackを持つリレーション
  stacks    Stack[]
  // Capsuleが複数のHistoryを持つリレーション
  histories History[]
  // Capsuleが複数のMediaを持つリレーション
  media     Media[]
}

model Media {
  // 自動インクリメントのプライマリキー
  id         String @id @default(cuid())
  // Capsuleとの関連ID
  capsule_id String
  // ファイルパス(例: "s3://bucket/media/file.mp4")
  file_path  String
  // ファイルタイプ(例: "video")
  file_type  String

  capsule Capsule @relation(fields: [capsule_id], references: [id])
}

model Stack {
  // 自動インクリメントのプライマリキー
  id          String   @id @default(cuid())
  // Capsuleとの関連ID
  capsule_id  String
  // ファイルパス
  file_path   String
  // アップロードユーザーID
  uploaded_by String
  // 作成日時
  created_at  DateTime @default(now())
  // 更新日時
  updated_at  DateTime @updatedAt

  capsule Capsule @relation(fields: [capsule_id], references: [id])
  user    User    @relation(fields: [uploaded_by], references: [id])
}

model Payment {
  // 自動インクリメントのプライマリキー
  id              String   @id @default(cuid())
  // Organizationモデルのidを参照する外部キー
  organization_id String
  // 支払額を表すフィールド
  amount          Float
  // 支払が行われた日付
  payment_date    String
  // 支払の有効期限
  duration        String
  // 作成日時
  created_at      DateTime @default(now())
  // 更新日時
  updated_at      DateTime @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id])
}

model History {
  // 自動インクリメントのプライマリキー
  id         String   @id @default(cuid())
  // Capsuleモデルのidの参照キー
  capsule_id String
  // イベントの内容を記録するフィールド（例: "Media added"）
  event      String
  // 作成日時
  created_at DateTime @default(now())
  // 更新日時
  updated_at DateTime @updatedAt

  capsule Capsule @relation(fields: [capsule_id], references: [id])
}

model UserClasses {
  // 自動インクリメントのプライマリキー
  id         String   @id @default(cuid())
  // Userモデルのidを参照する外部キー
  user_id    String
  // Classモデルのidを参照する外部キー
  class_id   String
  // 作成日時
  created_at DateTime @default(now())
  // 更新日時
  updated_at DateTime @updatedAt

  user  User  @relation(fields: [user_id], references: [id])
  class Class @relation(fields: [class_id], references: [id])
}
