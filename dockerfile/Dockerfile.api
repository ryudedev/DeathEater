# Step 1: Dependency installation
FROM node:22.9.0 as deps

WORKDIR /api
RUN npm i -g npm@latest pnpm@latest
<<<<<<< HEAD
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile
=======

# 依存関係インストールのみのキャッシュ層作成
COPY package.json pnpm-lock.yaml ./
RUN pnpm install
>>>>>>> 37d29c42bc9022d6bdb2a61073e86bbb66a0d3a7

# Step 2: Build with Prisma Client generation
FROM node:22.9.0 as builder

WORKDIR /api
RUN npm i -g pnpm@latest
COPY . .
COPY --from=deps /api/node_modules ./node_modules

<<<<<<< HEAD
# Generate Prisma Client
RUN if [ -f "prisma/schema.prisma" ]; then pnpm dlx prisma generate; else echo "schema.prisma not found"; fi

# Build the application and list contents of the dist folder
RUN pnpm build && ls -al /api/dist
=======
# Prisma Clientの生成
RUN pnpm dlx prisma generate

# アプリケーションのビルド
RUN pnpm build
>>>>>>> 37d29c42bc9022d6bdb2a61073e86bbb66a0d3a7

# Step 3: Production image
FROM node:22.9.0

WORKDIR /api
<<<<<<< HEAD
ENV NODE_ENV production
=======
>>>>>>> 37d29c42bc9022d6bdb2a61073e86bbb66a0d3a7

# Make sure pnpm is installed in production image
RUN npm i -g pnpm@latest 

# Copy production files
COPY --from=builder /api/dist ./dist
COPY --from=builder /api/package.json ./package.json
<<<<<<< HEAD
COPY --from=builder /api/node_modules ./node_modules
COPY --from=builder /api/prisma ./prisma
=======
COPY --from=builder /api/setup.sh ./setup.sh

# Prisma Clientを含む依存関係をコピー
COPY --from=builder /api/node_modules/@prisma ./node_modules/@prisma

# Give execute permissions to setup.sh in the final stage
RUN chmod +x ./setup.sh
>>>>>>> 37d29c42bc9022d6bdb2a61073e86bbb66a0d3a7

# Expose and run the app
EXPOSE 3001
<<<<<<< HEAD
CMD ["pnpm", "start:prod"]
=======
CMD [ "pnpm", "start:prisma:debug" ]
>>>>>>> 37d29c42bc9022d6bdb2a61073e86bbb66a0d3a7
